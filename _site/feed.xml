<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Hi I'm James and I'm a web developer</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 31 Jan 2019 09:03:59 +0000</pubDate>
    <lastBuildDate>Thu, 31 Jan 2019 09:03:59 +0000</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Get The Prime Factors</title>
        <description>&lt;p&gt;Recently I was tasked to complete a coding challenge.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Write a shell executable program in Ruby that prints the prime factors of a positive integer number.
The number should be received as an argument from the command line, as illustrated below.
Example of execution:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;executable_script_name&amp;gt; --number 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The expected output in this instance would be:
2, 5&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can find some context about prime factors ( https://www.mathsisfun.com/prime-factorization.html ).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When implementing a solution, please don’t use stdlib Prime or any ruby gems for your “production
code” - the decomposition of the input number into its prime factors should be implemented by
your own code. Feel free to use ruby gems for scripting and testing.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This challenge was for a Ruby On Rails role, so naturally it had to be written in Ruby. I haven’t written anything in Ruby for a while so it was a breath of fresh air to use it again.&lt;/p&gt;

&lt;p&gt;Here is the link to the &lt;a href=&quot;https://github.com/jameslieu/project_euler/tree/master/prime_factors/ruby&quot;&gt;repository&lt;/a&gt; if you wanted to look at the code.&lt;/p&gt;

&lt;p&gt;The Ruby version used was Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;2.5.1&lt;/code&gt; with no gems. I used TDD to assist with this challenge and used &lt;code class=&quot;highlighter-rouge&quot;&gt;Test::Unit::TestCase&lt;/code&gt; for testing.
To use it, simply run the script with the –number option:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'ruby init.rb --number 10'
=&amp;gt; 2,5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;I just wanted to write a summary of my thought process for this coding challenge.&lt;/p&gt;

&lt;p&gt;The prime factor context provided was very useful. It states that: “Prime Factorization” is &lt;strong&gt;finding which prime numbers multiply together to make the original number&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With this as well as the examples, we can gauge what steps we will need in order to achieve this.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We’ll need a &lt;strong&gt;‘Find next prime number’&lt;/strong&gt; function&lt;/li&gt;
  &lt;li&gt;A method to determine if a number is a prime number&lt;/li&gt;
  &lt;li&gt;Check if a value divided by the prime number is a positive integer using the modulo operator&lt;/li&gt;
  &lt;li&gt;Because we don’t quite know ‘where’ the loop ends, a recursive algorithm could work better for us here&lt;/li&gt;
  &lt;li&gt;A recursive algorithm will also work with the &lt;strong&gt;‘Find next prime number’&lt;/strong&gt; method as well for the same reason&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first method that was added was the &lt;code class=&quot;highlighter-rouge&quot;&gt;is_prime?(n)&lt;/code&gt; to check if the passed argument is a prime number and the &lt;code class=&quot;highlighter-rouge&quot;&gt;next_prime_number(n=0, next=nil, first_pass=true)&lt;/code&gt; to get the next prime number from the argument passed in. The &lt;code class=&quot;highlighter-rouge&quot;&gt;is_prime?(n)&lt;/code&gt; method I found on stackoverflow but the &lt;code class=&quot;highlighter-rouge&quot;&gt;next_prime_number(n=0, next=nil, first_pass=true)&lt;/code&gt; method I wrote myself.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;next_prime_number(n=0, next=nil, first_pass=true)&lt;/code&gt; method was written as a recursive algorithm. On its ‘first pass’ we increment the number parameter so that if the number parameter is already a prime number we increment by 1. We then check if the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; parameter is nil and do the same. We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;is_prime?(n)&lt;/code&gt; method to check the number and if true then we return the number if not we continue with the recursion.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next_prime_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_pass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;next_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_prime?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;next_prime_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I then wrote a &lt;code class=&quot;highlighter-rouge&quot;&gt;PrimeFactors&lt;/code&gt; class, constructor and the method &lt;code class=&quot;highlighter-rouge&quot;&gt;get_prime_factors(value=@num, prime_number=2, result=[])&lt;/code&gt; passing in 3 parameters; the value, the prime number (setting the default value to 2) and a result array parameter. The unit tests came after, testing the value &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt; with the assertions being &lt;code class=&quot;highlighter-rouge&quot;&gt;[2,5]&lt;/code&gt; as per the example on the code challenge. I added more tests to test &lt;code class=&quot;highlighter-rouge&quot;&gt;12&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;17&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;147&lt;/code&gt; as those seem to account for different scenarios as seen in the context url provided (https://www.mathsisfun.com/prime-factorization.html).&lt;/p&gt;

&lt;p&gt;Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_prime_factors(value=@num, prime_number=2, result=[])&lt;/code&gt; method, we first check the value itself is a prime number, if so then we return it and end the loop early. If it isn’t, we move on and check if the value divided by the prime number is NOT a whole integer first. If this is the case we get the next prime number and we change the recursion parameters.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prime_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;next_prime_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PrimeNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next_prime_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prime_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_prime_factors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_prime_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it is a whole integer we first append the prime number to the results array, we do the division calulation and setting the result to a variable. Now we check if that variable is a prime number, if it is then we append it to the results array and then return it as that should be the last available prime factor. If not, then we continue with the recursion passing in the new variable.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prime_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prime_number&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PrimeNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_prime?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_prime_factors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prime_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, I realised that we want to run the script on the command line with an option &lt;code class=&quot;highlighter-rouge&quot;&gt;--number&lt;/code&gt; and a argument. I used the &lt;a href=&quot;http://ruby-doc.org/stdlib-2.6.1/libdoc/optparse/rdoc/OptionParser.html&quot;&gt;OptionParser&lt;/a&gt; to achieve this. Which also includes usage information:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby init.rb --number 10
=&amp;gt; 2,5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby init.rb
Usage: init [options]
        --number NUMBER              Enter a NUMBER to get it's prime factors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby init.rb --help
Usage: init [options]
        --number NUMBER              Enter a NUMBER to get it's prime factors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The time complexity on this I believe is O(n^2) as we can potentially have a nested loop. Although my knowledge on Big O Notation is pretty limited so I’m not 100% sure to be honest. The first loop is the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_prime_factors&lt;/code&gt; recursion and the second, is from the returned value by dividing the prime number if is not a positive integer; we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;next_prime_number&lt;/code&gt;  which is also a recursive algorithm.&lt;/p&gt;

&lt;p&gt;I’ve separated the &lt;code class=&quot;highlighter-rouge&quot;&gt;PrimeNumber&lt;/code&gt; specific methods into its own class so I could test it in isolation as well as treat it as static methods as it doesn’t feel right to instantiate it each time it needs to be used. It also means it be reused if we were to do other prime number specific tasks.&lt;/p&gt;

&lt;p&gt;Overall I enjoyed this challenge, it is one of those challenges, which at first glance, feels very tricky and may have hidden gotchas but when taking a step back to carefully look at the requirements and properly planning how to solve this, it makes it substantially easier and less intimidating. I haven’t written in Ruby in quite some time, so it was great to use it again for this challenge. I really enjoy using it, it is unfortunate that there are so little job prospects in Milton Keynes (where I’m based) and Ruby itself seems to be losing popularity overall.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Jan 2019 07:45:00 +0000</pubDate>
        <link>http://localhost:4000/ruby/prime-numbers/prime-factors/2019/01/31/prime-factorization/</link>
        <guid isPermaLink="true">http://localhost:4000/ruby/prime-numbers/prime-factors/2019/01/31/prime-factorization/</guid>
        
        
        <category>ruby</category>
        
        <category>prime-numbers</category>
        
        <category>prime-factors</category>
        
      </item>
    
      <item>
        <title>The Miracle Morning review</title>
        <description>&lt;p&gt;Just finished a short book “The Miracle Morning” By Hal Elrod.&lt;/p&gt;

&lt;p&gt;My take of this book is essentially about how, if you changed your routine to sleep and wake up early (5-6am for example) and follow 6 steps (S.A.V.E.R.S) outlined in the book. You can drastically improve your life.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1) Silence - take a moment to appreciate the quiet environment you’re in at this time of day, everyone else around you is asleep. Use this time to meditate/pray/reflect (5 minutes).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2) Affirmations - having positive affirmations and reading/saying them out loud can have a powerful affect on your mindset and can really boost your self-confidence and drive to achieve your goals and dreams. (5 minutes)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;3) Visualisation - Take a moment to visualise what your goals and dreams are, this supposedly makes it seem more attainable to you and motivates you to do tasks necessary get you closer to those dreams. (5 minutes)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;4) Exercise - Most people’s excuse for not exercising is they’re either too tired or have no time. Waking up this early mitigates both of these excuses. At this time in the morning, you shouldn’t be tired or have little time, 20 minutes of exercise should be achievable. Do this every morning daily, and you’re sure to improve your health and well-being. ( 20 minutes )&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;5) Reading - Read 10 pages of a good book. Imagine doing this everyday for a year. That’s 3650 pages! Easily a good few books, and only 10-20minutes of your morning. This is one of the best ways to ‘invest’ in yourself and is quite simple/easy to do per day. (20 minutes)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;6) Scribing - Write in your journal, if you haven’t got one then start one. There is something satisfying about putting down your thoughts or how you’re feeling that morning. Also write down 3 things you’re grateful for, this will put you in a positive mindset. (5 minutes)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You should be able to do all of these steps in about an hour or so, that’s not to say that you have to do it in this particular order, these can be customised and tailored to your individual circumstances, in fact the book states that you can do the whole thing in 6 minutes (1 minute each). Supposedly if you did this before you start your day, you really start it on a high note, with positivity and motivation. All of these individual steps are things that have some benefit to your life in one way or another. And being a developer who has issues with ‘burnout’ from time to time, I wonder if this morning routine will help with that.&lt;/p&gt;

&lt;p&gt;I’ve kind of tried waking up early last December, managed to do it for a few weeks. But eventually stopped due to the holidays and lack of structure. I’m going to give this a go again, really interested to see whether my life does in fact improve. Either way, I recommend this book, its easy to read and I wish I read it much earlier in life.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Jan 2019 10:09:00 +0000</pubDate>
        <link>http://localhost:4000/book/review/2019/01/30/the-miracle-morning/</link>
        <guid isPermaLink="true">http://localhost:4000/book/review/2019/01/30/the-miracle-morning/</guid>
        
        
        <category>book</category>
        
        <category>review</category>
        
      </item>
    
      <item>
        <title>How to style nested ordered lists using css</title>
        <description>&lt;p&gt;I’ve found that it can be quite difficult to figure out how to style nested ordered lists using css. Imagine if I needed to put together a contract or Terms and conditions document using HTML and CSS.&lt;/p&gt;

&lt;p&gt;Its not uncommon for contracts to use sub sections and so the document will likely use nested ordered lists in HTML. What if the sub sections are styled differently?&lt;/p&gt;

&lt;p&gt;An example can look something like this:&lt;/p&gt;

&lt;div class=&quot;style-ol&quot;&gt;
  &lt;ol&gt;
    &lt;li&gt;
      Alpha
    &lt;/li&gt;
    &lt;li&gt;
      Beta
    &lt;/li&gt;
    &lt;li&gt;
      Charlie
    &lt;/li&gt;
    &lt;ol&gt;
      &lt;li&gt;
        Delta
      &lt;/li&gt;
      &lt;li&gt;
        Echo
      &lt;/li&gt;
      &lt;ol&gt;
        &lt;li&gt;
          Foxtrot
        &lt;/li&gt;
        &lt;li&gt;
          Golf
        &lt;/li&gt;
        &lt;li&gt;
          Hotel
        &lt;/li&gt;
      &lt;/ol&gt;
    &lt;/ol&gt;
  &lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;In the example above, the first list style is numeric, the second are made up of letters and the third using roman numerals:&lt;/p&gt;

&lt;p&gt;Here is my solution:&lt;/p&gt;

&lt;pre&gt;
  ol {
    counter-reset: first-counter;
    list-style-type: none;
    position: relative;
    padding-left: 20px;
    margin-left: 15px;
  }

  ol li {
    margin: 10px 0;
  }

  ol li:before {
    content: counter(first-counter) '.';
    counter-increment: first-counter;
    position: absolute;
    left: 0px;
  }

  ol ol {
    counter-reset: second-counter;
    list-style-type: none;
  }

  ol ol li {
    padding-left: 15px;
  }

  ol ol li:before {
    content: counter(second-counter, lower-alpha) '.';
    counter-increment: second-counter;
    list-style-type: none;
    left: 10px;
    position: absolute;
  }

  ol ol ol {
    counter-reset: third-counter;
  }

  ol ol ol li {
    padding-left: 15px;
  }

  ol ol ol li:before {
    list-style-type: none;
    content: counter(third-counter, lower-roman) '.';
    counter-increment: third-counter;
  }
&lt;/pre&gt;

&lt;p&gt;Firstly, you’ll have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;counter-reset&lt;/code&gt;, and give it a sensible variable name e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;first-counter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;second-counter&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;third-counter&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;
  ol {
    counter-reset: first-counter;
    list-style-type: none;
    position: relative;
    padding-left: 20px;
    margin-left: 15px;
  }
&lt;/pre&gt;

&lt;p&gt;I then set &lt;code class=&quot;highlighter-rouge&quot;&gt;list-style-type: none;&lt;/code&gt;, which pretty much removes the original list style completely&lt;/p&gt;

&lt;pre&gt;
  ol li:before {
    content: counter(first-counter) '.';
    counter-increment: first-counter;
    position: absolute;
    left: 0px;
  }
&lt;/pre&gt;

&lt;p&gt;Then in the psudo-element &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt;, append the content style:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;content: counter(first-counter)&lt;/code&gt;
(‘first-counter’ is the variable you declared earlier)&lt;/p&gt;

&lt;p&gt;Increment using &lt;code class=&quot;highlighter-rouge&quot;&gt;counter-increment&lt;/code&gt;. Then you’ll need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt; style to adjust the position accordingly.&lt;/p&gt;

&lt;p&gt;To change the list style type you can pass that in as a second argument 
&lt;code class=&quot;highlighter-rouge&quot;&gt;content: counter(second-counter, lower-alpha) '.';&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
  a. foo
  b. bar
  c. baz
&lt;/pre&gt;

&lt;p&gt;And finally, if I wanted to change the character (decimal point) after the list-style, all I have to do is change the string: &lt;code class=&quot;highlighter-rouge&quot;&gt;content: counter(first-counter) '%';&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
  1% foo
  2% bar
  3% baz
&lt;/pre&gt;

&lt;p&gt;As you can see, this is extremely hacky and as far as I can tell, seems to be the only way you can style nested ordered lists.&lt;/p&gt;

&lt;p&gt;In any case, it felt great to have finally found the solution, and I’ll definitely be refering to this post next time I’m asked to style ordered lists.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Apr 2016 23:51:00 +0100</pubDate>
        <link>http://localhost:4000/css/2016/04/15/how-to-style-nested-ordered-lists-using-css/</link>
        <guid isPermaLink="true">http://localhost:4000/css/2016/04/15/how-to-style-nested-ordered-lists-using-css/</guid>
        
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>Launch Sublime Text 3 using command line</title>
        <description>&lt;p&gt;Sublime Text 3 ships with a CLI called &lt;code class=&quot;highlighter-rouge&quot;&gt;subl&lt;/code&gt;. You will have to do a minor configuration though.&lt;/p&gt;

&lt;p&gt;Firstly, check your &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; by running: &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It should look like this:
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then copy this into terminal:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s &quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&quot; /usr/local/bin/subl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now typing &lt;code class=&quot;highlighter-rouge&quot;&gt;subl&lt;/code&gt; in the command line should open Sublime&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Oct 2015 14:35:00 +0100</pubDate>
        <link>http://localhost:4000/sublime/text/ubuntu/linux/2015/10/04/launch-sublime-3-using-terminal/</link>
        <guid isPermaLink="true">http://localhost:4000/sublime/text/ubuntu/linux/2015/10/04/launch-sublime-3-using-terminal/</guid>
        
        
        <category>sublime</category>
        
        <category>text</category>
        
        <category>ubuntu</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Autocomplete git commands and branch names</title>
        <description>&lt;p&gt;In bash in Mac OS X, you can use [TAB] to autocomplete file paths. By default this doesn’t work with git commands,  I’ll have to manually configurate it. Here’s how:&lt;/p&gt;

&lt;p&gt;Paste this command into the terminal, this will download the &lt;code class=&quot;highlighter-rouge&quot;&gt;git-completion.bash&lt;/code&gt; script needed to execute the autocomplete:&lt;/p&gt;
&lt;pre&gt;
  curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
&lt;/pre&gt;

&lt;p&gt;Next, add this to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;. This line will tell bash to execute the git autocomplete script if it exists.&lt;/p&gt;

&lt;pre&gt;
  if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
  fi
&lt;/pre&gt;

&lt;p&gt;Restart bash and then autocomplete should work for git commands&lt;/p&gt;

&lt;p&gt;If this doesn’t work right off the bat, permission is probably needed to run the script:&lt;/p&gt;
&lt;pre&gt;
  chmod -X ~/.git-completion.bash
&lt;/pre&gt;

&lt;p&gt;When working in git I tend to come across or create long-winded git branch names so being able to autocomplete this will definietely improve my workflow.&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Mar 2015 20:15:00 +0000</pubDate>
        <link>http://localhost:4000/git/branch/autocomplete/2015/03/15/Autocomplete-git-commands-and-branch-names/</link>
        <guid isPermaLink="true">http://localhost:4000/git/branch/autocomplete/2015/03/15/Autocomplete-git-commands-and-branch-names/</guid>
        
        
        <category>git</category>
        
        <category>branch</category>
        
        <category>autocomplete</category>
        
      </item>
    
      <item>
        <title>Simply git-rebase</title>
        <description>&lt;p&gt;Today I’ve decided to write about &lt;code class=&quot;highlighter-rouge&quot;&gt;Git Rebasing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To be honest I’ve only recently discovered rebasing and I’m not too familiar with all of its uses or commands. What I do know is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; command allows me to modify the history of my repository by changing my &lt;code class=&quot;highlighter-rouge&quot;&gt;commits&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Git rebase&lt;/code&gt; can reorder, edit, or squash commits together. I’ve found this especially useful when commiting very minor changes such as removing white space or correcting typos. It happens all too frequently and these commits do nothing but clutter my repository history. Being able to combine those to a previous commit has made my commit history a lot cleaner.&lt;/p&gt;

&lt;p&gt;Based on my experience I would typically use &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Delete commit messages or commits that are no longer necessary&lt;/li&gt;
  &lt;li&gt;Squash multiple commits into one&lt;/li&gt;
  &lt;li&gt;Edit my commit messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me demonstrate an example with &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase -i HEAD~3&lt;/code&gt;. Git rebase with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; flag begins an interactive rebasing session. The &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD~3&lt;/code&gt; flag refers to the latest commits with &lt;code class=&quot;highlighter-rouge&quot;&gt;~3&lt;/code&gt; meaning how many commits or how far in my history I want to edit, in this case three commits.&lt;/p&gt;

&lt;p&gt;This will then display the following:&lt;/p&gt;

&lt;pre&gt;
  pick 3dd14f1 second commit
  pick 0daba41 third commit
  pick f0111b0 fourth commit

  # Rebase 5376924..f0111b0 onto 5376924
  #
  # Commands:
  #  p, pick = use commit
  #  r, reword = use commit, but edit the commit message
  #  e, edit = use commit, but stop for amending
  #  s, squash = use commit, but meld into previous commit
  #  f, fixup = like &quot;squash&quot;, but discard this commit's log message
  #  x, exec = run command (the rest of the line) using shell
  #
  # These lines can be re-ordered; they are executed from top to bottom.
  #
  # If you remove a line here THAT COMMIT WILL BE LOST.
  #
  # However, if you remove everything, the rebase will be aborted.
  #
  # Note that empty commits are commented out
  ~
  ~
  ~
&lt;/pre&gt;

&lt;p&gt;The top three lines represent my commits. &lt;code class=&quot;highlighter-rouge&quot;&gt;pick&lt;/code&gt; being the command, following that is the commit identifier e.g.&lt;code class=&quot;highlighter-rouge&quot;&gt;3dd14f1&lt;/code&gt; and finally your message e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;second commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The rest are comments provided by &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; for additional information as indicated with a &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; at the start of the line. These are the commands that are available. However, I’ve only needed to use &lt;code class=&quot;highlighter-rouge&quot;&gt;pick&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;squash&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fixup&lt;/code&gt; thus far.&lt;/p&gt;

&lt;pre&gt;
  # Commands:
  #  p, pick = use commit
  #  r, reword = use commit, but edit the commit message
  #  e, edit = use commit, but stop for amending
  #  s, squash = use commit, but meld into previous commit
  #  f, fixup = like &quot;squash&quot;, but discard this commit's log message
  #  x, exec = run command (the rest of the line) using shell
&lt;/pre&gt;

&lt;p&gt;Its always good to save certain changes or updates I make as I develop a feature or make additions to my codebase. Its a good habit to have, yet as I’m doing this, I would sometimes make two, three or even over five commits which represent the same feature. Therefore the commit messages are either very similar or will be too brief, which then can be confusing if read out of context.&lt;/p&gt;

&lt;p&gt;This is would be a good time to &lt;code class=&quot;highlighter-rouge&quot;&gt;squash&lt;/code&gt; my commits. &lt;code class=&quot;highlighter-rouge&quot;&gt;Squashing&lt;/code&gt; commits essentially means combining my commit messages into one single commit which can therefore make more sense as a ‘record’ in my repository history. Sometimes I would need to look back on my respository history and it would be easier if the code or feature I’m looking for is located in a single commit as opposed to many smaller and unclear commits.&lt;/p&gt;

&lt;p&gt;To &lt;code class=&quot;highlighter-rouge&quot;&gt;squash&lt;/code&gt; my commits, I would have to select the commits I want to combine and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;squash&lt;/code&gt; command (leaving the &lt;code class=&quot;highlighter-rouge&quot;&gt;pick&lt;/code&gt; command on the commit you want the other commits to ‘combine’ into).&lt;/p&gt;

&lt;pre&gt;
  pick 3dd14f1 second commit
  squash 0daba41 third commit
  squash f0111b0 fourth commit
&lt;/pre&gt;

&lt;p&gt;Once I make those changes and save. I would then be moved on to the next stage which then gives me the option to edit those messages if I wanted to. Which is great if I had typos or wanted to make my message more comprehensible, as an example I’ll change the 2nd commit message to &lt;code class=&quot;highlighter-rouge&quot;&gt;Updated third commit&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;
  # This is a combination of 3 commits.
  # The first commit's message is:
  second commit

  # This is the 2nd commit message:

  Updated third commit

  # This is the 3rd commit message:

  fourth commit

  # Please enter the commit message for your changes. Lines starting
  # with '#' will be ignored, and an empty message aborts the commit.
  # rebase in progress; onto 5376924
  # You are currently editing a commit while rebasing branch 'master' on '5376924'.
  #
  # Changes to be committed:
  #       modified:   README.md
  #
  ~
  ~
  ~
&lt;/pre&gt;
&lt;p&gt;NOTE: Remember that these are the three latest commits as I used the &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD~3&lt;/code&gt; flag&lt;/p&gt;

&lt;p&gt;Save that and thats all there is to it! If I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; to see my current commits, I would only have two commits instead of four as both commit two, three and four are now &lt;code class=&quot;highlighter-rouge&quot;&gt;squashed&lt;/code&gt; into a single commit and therefore makes my commit history cleaner and more organised.&lt;/p&gt;

&lt;pre&gt;
  james$ git log

  commit 73031c36716b6891dc1b7cd6304d156e369a515d
  Author: James Lieu &amp;lt;j.lieu888@gmail.com&amp;gt;
  Date:   Mon Jan 26 00:01:13 2015 +0000

      second commit

      Updated third commit

      fourth commit

  commit 537692465b7d350fb74870363e5abb3bbbb42ea7
  Author: James Lieu &amp;lt;j.lieu888@gmail.com&amp;gt;
  Date:   Mon Jan 26 00:00:58 2015 +0000

      initial commit
&lt;/pre&gt;

&lt;p&gt;When I add minor changes to my code such as removal of white spacing or new lines, they still need to be committed. This can be annoying if I have already made a commit before doing this. But having a commit message for those are unnecessary or irrelevant to my code/feature. This is where I can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixup&lt;/code&gt; command. The process is the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;squashing&lt;/code&gt;, meaning that the commits will be combined together. However, the commits that I use the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixup&lt;/code&gt; command on will then have its message removed.&lt;/p&gt;

&lt;p&gt;NOTE: If you are performing a squash/fixup command on commits that have already been pushed to your remote repository your will have to &lt;code class=&quot;highlighter-rouge&quot;&gt;force&lt;/code&gt; push your branch to the remote. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;git push -f origin master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another great git command is &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt;. This allows me to edit my last git message which is great for when I want a quick solution to fix typos or make changes to a commit I’ve just created.&lt;/p&gt;

&lt;p&gt;This is the extent of my git rebasing experience so far, I have yet to find out what the other features of &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebasing&lt;/code&gt; does. Discovering these git techniques have made my commit history a lot more organised and cleaner. It also means less embarassing pull requests, espcially when I overlook something, fix typos and white spacing!&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Jan 2015 23:00:00 +0000</pubDate>
        <link>http://localhost:4000/git-rebase/git/rebase/2015/01/25/simply-git-rebasing/</link>
        <guid isPermaLink="true">http://localhost:4000/git-rebase/git/rebase/2015/01/25/simply-git-rebasing/</guid>
        
        
        <category>git-rebase</category>
        
        <category>git</category>
        
        <category>rebase</category>
        
      </item>
    
      <item>
        <title>What is Polymorphism?</title>
        <description>&lt;p&gt;What is polymorphism? I’ve found that this question in particular is asked quite frequently in tech interviews. I was asked this in a phone interview once and I did not know the answer to this unfortunately. I believe that it was this question that prevented me from getting to the next stage of the interview, so of course I decided to look into it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/polymorphism_example.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Polymorphism essentially means &lt;em&gt;many forms&lt;/em&gt; and is one of the fundamental features of object oriented programming. It lets us automatically do the correct behavior even if what we’re working with could take one of many different forms, simply put; it means being able to send the same message and get different results. Here’s the most basic example I’ve found; the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;In Ruby the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator will &lt;em&gt;behave&lt;/em&gt; differently depending on how you use it.&lt;/p&gt;

&lt;p&gt;For example, lets say you have two variables; &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the two variables are &lt;code class=&quot;highlighter-rouge&quot;&gt;integers&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator will numerically add them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, what if the two variables were &lt;code class=&quot;highlighter-rouge&quot;&gt;strings&lt;/code&gt; instead?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;World&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, using &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator for &lt;code class=&quot;highlighter-rouge&quot;&gt;strings&lt;/code&gt; will &lt;strong&gt;concatenate&lt;/strong&gt; them instead.&lt;/p&gt;

&lt;p&gt;Now this is a basic example of how polymorphism works and is built into a lot of programming languages, but we can use the same idea with our own classes and objects.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Here is an example of a polymorphic association:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_noise&lt;/span&gt; 
    &lt;span class=&quot;s2&quot;&gt;&quot;Some noise&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt; 
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is sleeping.&quot;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
    
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_noise&lt;/span&gt; 
    &lt;span class=&quot;s1&quot;&gt;'Woof!'&lt;/span&gt;         
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
    
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt; 
    
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_noise&lt;/span&gt; 
    &lt;span class=&quot;s1&quot;&gt;'Meow!'&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
    
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lets say we have a simple inheritance hierarchy. There is an &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; superclass and two descendant subclasses, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt;. Each of these three classes has its own implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;make_noise&lt;/code&gt; method. The implementation of the method of the descendants replaces the definition of a method in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;
    
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_noise&lt;/span&gt; 
    &lt;span class=&quot;s1&quot;&gt;'Woof!'&lt;/span&gt;         
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
    
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;make_noise&lt;/code&gt; method in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt; class replaces the &lt;code class=&quot;highlighter-rouge&quot;&gt;make_noise&lt;/code&gt; method of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; class. The idea is that even though the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt; class is &lt;em&gt;inheriting&lt;/em&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; class and would therefore already have access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;make_noise&lt;/code&gt; method, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt; class will have its own &lt;em&gt;specialized&lt;/em&gt; version of that method which is unique to that particular class. This is referred to as overiding the method of the superclass, which just means you write it again.&lt;/p&gt;

&lt;p&gt;This means is that the method will change its behaviour depending where it was originally instantiated from. Now you may wonder why this would be useful.. Here is an example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_noise&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Woof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Meow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you had an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt; objects as shown above, you can call the &lt;code class=&quot;highlighter-rouge&quot;&gt;make_noise&lt;/code&gt; method on all of them and it will return the &lt;strong&gt;correct&lt;/strong&gt; output as expected. While this is a relatively simplified example, you can see why this would be useful if we had an array of a thousand of these objects. We wouldn’t need to look into what class they were originally instantiated from, we just know that it works.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Dec 2014 17:07:00 +0000</pubDate>
        <link>http://localhost:4000/polymorphism/2014/12/29/what-is-polymorphism/</link>
        <guid isPermaLink="true">http://localhost:4000/polymorphism/2014/12/29/what-is-polymorphism/</guid>
        
        
        <category>polymorphism</category>
        
      </item>
    
      <item>
        <title>Install Sublime Text 2 on Ubuntu</title>
        <description>&lt;p&gt;The fastest way I’ve found to install sublime text 2.&lt;/p&gt;

&lt;p&gt;Copy and paste the following into the terminal&lt;/p&gt;
&lt;pre&gt;
sudo add-apt-repository ppa:webupd8team/sublime-text-2
sudo apt-get update
sudo apt-get install sublime-text
&lt;/pre&gt;

&lt;p&gt;After running this, Sublime Text 2 should have been installed within the /usr/lib/sublime-text-2 directory and can be launched from the Dashboard
Alternatively by typing &lt;strong&gt;subl&lt;/strong&gt;, &lt;strong&gt;sublime-text&lt;/strong&gt; or &lt;strong&gt;sublime-text-2&lt;/strong&gt; into a Terminal window.&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Aug 2014 10:47:00 +0100</pubDate>
        <link>http://localhost:4000/sublime/text/ubuntu/linux/2014/08/13/install-sublime-text-2/</link>
        <guid isPermaLink="true">http://localhost:4000/sublime/text/ubuntu/linux/2014/08/13/install-sublime-text-2/</guid>
        
        
        <category>sublime</category>
        
        <category>text</category>
        
        <category>ubuntu</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Bash command line for Linux - Cheat Sheet</title>
        <description>&lt;p&gt;I’ve found these commands to be very useful but at the same time I can just as easily forget them. Therefore in this post I wanted to add a cheat sheet so I can refer back to it whenever I need to. These are the common ones I used the most&lt;/p&gt;

&lt;p&gt;If there are any you think will also be useful please let me know in the comments below.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;useful-commands&quot;&gt;Useful commands&lt;/h3&gt;

&lt;p&gt;The Commands below are the ones I also find useful and need to use more. Learning to master &lt;strong&gt;grep&lt;/strong&gt; is definitely one of my priorities.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Command&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;cat&lt;/td&gt;
      &lt;td&gt;Concatenate and print (display) the content of files&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;chmod&lt;/td&gt;
      &lt;td&gt;Change access permissions&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;df&lt;/td&gt;
      &lt;td&gt;Display free disk space&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;echo&lt;/td&gt;
      &lt;td&gt;Display message on screen&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;env&lt;/td&gt;
      &lt;td&gt;Environment variables&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;eval&lt;/td&gt;
      &lt;td&gt;Evaluate several commands/arguments&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;exit&lt;/td&gt;
      &lt;td&gt;Exit the shell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;grep&lt;/td&gt;
      &lt;td&gt;Search file(s) for lines that match a given pattern&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mkdir&lt;/td&gt;
      &lt;td&gt;Create new folder(s)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;passwd&lt;/td&gt;
      &lt;td&gt;Modify a user password&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pwd&lt;/td&gt;
      &lt;td&gt;Print Working Directory&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ssh&lt;/td&gt;
      &lt;td&gt;Secure Shell client (remote login program)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;su&lt;/td&gt;
      &lt;td&gt;Substitute user identity&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sudo&lt;/td&gt;
      &lt;td&gt;Execute a command as another user&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tail&lt;/td&gt;
      &lt;td&gt;Output the last part of file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tar&lt;/td&gt;
      &lt;td&gt;Store, list or extract files in an archive&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;exploring-and-changing-files&quot;&gt;Exploring and changing files&lt;/h3&gt;

&lt;p&gt;These commands are the commands I feel improves my workflow the most and overall productivity when working on a project. Easy to remember and definitely a good place to start for beginners&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Command&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ls&lt;/td&gt;
      &lt;td&gt;List the files/folders in a directory&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ls -la&lt;/td&gt;
      &lt;td&gt;List all the files/folders in a directory (including hidden files) and displays additional information about them&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;cd pathname/directory/subdirectory&lt;/td&gt;
      &lt;td&gt;To change directory&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;cd ../&lt;/td&gt;
      &lt;td&gt;To go up a level of a directory&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cd ../../themes/images&lt;/td&gt;
      &lt;td&gt;Or you can chain these commands together to navigate across directories&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;cp filename-to-copy.txt new-file-name.txt&lt;/td&gt;
      &lt;td&gt;To copy a file with the same directory simply type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cp filename.txt ../../new-directory/filename.txt&lt;/td&gt;
      &lt;td&gt;To copy between directories:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cp images/* ../skin/&lt;/td&gt;
      &lt;td&gt;To copy all files from one directory to another, use the * character, which unofficially means all&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;mv current-directory/file.txt ../new-directory/file&lt;/td&gt;
      &lt;td&gt;Move a file&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;mv oldfilename.txt newfilename.txt&lt;/td&gt;
      &lt;td&gt;To rename a file, use the ‘mv’ but change the name of the file when stating the directory receiving the file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rm filename.txt&lt;/td&gt;
      &lt;td&gt;To delete a file type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rm -r folder&lt;/td&gt;
      &lt;td&gt;Alternatively if you wish to delete a directory, and all directories and files within that recursively, type&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Tue, 05 Aug 2014 14:09:30 +0100</pubDate>
        <link>http://localhost:4000/ssh/2014/08/05/linux-cheatsheet/</link>
        <guid isPermaLink="true">http://localhost:4000/ssh/2014/08/05/linux-cheatsheet/</guid>
        
        
        <category>ssh</category>
        
      </item>
    
      <item>
        <title>How to setup port forwarding on VirtualBox</title>
        <description>&lt;p&gt;One of the rails project I worked with required me to get VirtualBox up and running with the following specs: Ubuntu 14.04 server amd64 on a 2GB RAM 2 core VM with VT-x/ AMD-v.&lt;/p&gt;

&lt;p&gt;And in there, I had to set up ruby via RVM, install a lot of extra tools and ruby gems. To make things easier for me I used port forwarding.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Port forwarding allows remote computers (for example, computers on the Internet) to connect to a specific computer or service within a private local-area network (LAN) - &lt;em&gt;according to wikipedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One benefit of using port forwarding is that it allows you to run tasks on the command-line without having to work directly in VirtualBox by using your host terminal.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;First thing I did was to install the OpenSSH client applications on Ubuntu&lt;/p&gt;
&lt;pre&gt;
sudo apt-get install openssh-server
&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
Then to setup a port forwarding into the guest’s port 22 so I can access it from my host terminal.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To enable port forwarding, open the settings for your Virtual Machine &lt;strong&gt;(For OS X)&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;You can do this from the VirtualBox Manager, choose Settings(found on the top left)&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the &lt;strong&gt;Network&lt;/strong&gt; tab&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/port_forwarding_1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure that &lt;strong&gt;NAT&lt;/strong&gt; is selected in the &lt;strong&gt;Attached to: selector.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Click on the Port Forwarding button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/port_forwarding_2.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Pick a port on our Host, for example 2222, and forward TCP connections received on this port, to port 22/TCP (SSH) on our guest. (&lt;em&gt;To do this, click on the green (+) button on the right&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Host IP is set to nothing - this is on purpose, and is equivalent to saying 0.0.0.0. However, it does mean that ANY MACHINE that can access your Host on TCP port 2222 will be able to talk to the SSH on your guest.&lt;/li&gt;
  &lt;li&gt;Theres no need to change the Guest IP so leave it blank.&lt;/li&gt;
  &lt;li&gt;Now confirm all the changes and click &lt;strong&gt;ok&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Restart the Virtual Machine so the changes are applied&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you should be ready to connect to the guest.
&lt;em&gt;Note: Make sure you have created a username on your guest. You cannot log in as root using SSH`&lt;/em&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Start your VM.
In your terminal enter:&lt;/p&gt;

&lt;pre&gt;
ssh [user_name]@127.0.0.1 -p 2222
&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;
ssh -l [user_name] -p 2222 127.0.0.1
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Don’t forget to replace &lt;strong&gt;[user_name]&lt;/strong&gt; with the user you created.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You will be prompted to accept the host key so be sure to enter &lt;strong&gt;yes&lt;/strong&gt;. Then finally you’ll be prompted to enter the password for the username:&lt;/p&gt;

&lt;pre&gt;
[user_name]@127.0.0.1's password:
&lt;/pre&gt;

&lt;p&gt;Enter your password and you should now be logged in!&lt;/p&gt;

&lt;p&gt;Now you should be able to run commands in the terminal without going into the VM directly. Great for running specs for your rails applications or adding new gems and tools.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Jul 2014 11:43:30 +0100</pubDate>
        <link>http://localhost:4000/virtual-box/ubuntu/2014/07/31/port-forwarding/</link>
        <guid isPermaLink="true">http://localhost:4000/virtual-box/ubuntu/2014/07/31/port-forwarding/</guid>
        
        
        <category>virtual-box</category>
        
        <category>ubuntu</category>
        
      </item>
    
  </channel>
</rss>
