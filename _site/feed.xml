<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description>Hi I'm James, I'm a Junior web developer, Illustrator and Animator</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Dropping and resetting database all in one rake task</title>
				<description>&lt;p&gt;When building a new Rails app, I’ve found that I constantly have had to drop the database, create it, run a migration and finally the seed.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;rake db:drop
rake db:create
rake db:migrate
rake db:seed

#=&amp;gt; And for the test environment
RAILS_ENV=test rake db:drop
RAILS_ENV=test rake db:create
RAILS_ENV=test rake db:migrate
RAILS_ENV=test rake db:seed&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This as you can tell can be very tedious. A better solution I’ve found is to create a rake task to handle it all.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;You can name your task what ever you like&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;#=&amp;gt; /lib/tasks/db.rake

namespace :db do
  task :rebuild =&amp;gt; :environment do
    raise &amp;quot;Cannot run this task in #{Rails.env}&amp;quot; unless [&amp;#39;development&amp;#39;, &amp;#39;test&amp;#39;].include? Rails.env
    puts Rake::Task[&amp;quot;db:drop&amp;quot;].invoke
    puts Rake::Task[&amp;quot;db:create&amp;quot;].invoke
    puts Rake::Task[&amp;quot;db:migrate&amp;quot;].invoke
    puts Rake::Task[&amp;quot;db:seed&amp;quot;].invoke if Rails.env == &amp;#39;development&amp;#39;
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this all you have to do is run the following rake command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;rake db:rebuild
RAILS_ENV=test rake db:rebuild&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;NOTE: it goes without saying, NEVER use this in production!&lt;/code&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 30 Jul 2014 12:41:30 +0100</pubDate>
				<link>/ruby/rails/2014/07/30/rake-db-rebuild.html</link>
				<guid isPermaLink="true">/ruby/rails/2014/07/30/rake-db-rebuild.html</guid>
			</item>
		
			<item>
				<title>My first post!</title>
				<description>&lt;p&gt;This is my first blog post. The post below is the basic markdown used in Jekyll which I’ll leave here for reference&lt;/p&gt;

&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;def print_hi(name)
  puts &amp;quot;Hi, #{name}&amp;quot;
end
print_hi(&amp;#39;Tom&amp;#39;)
#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
				<pubDate>Tue, 29 Jul 2014 14:02:30 +0100</pubDate>
				<link>/ruby/rails/2014/07/29/my-first-post.html</link>
				<guid isPermaLink="true">/ruby/rails/2014/07/29/my-first-post.html</guid>
			</item>
		
	</channel>
</rss>
