<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://jameslieu.co.uk/feed.xml" rel="self" type="application/atom+xml" /><link href="http://jameslieu.co.uk/" rel="alternate" type="text/html" /><updated>2021-03-08T10:18:55+00:00</updated><id>http://jameslieu.co.uk/feed.xml</id><title type="html">James Lieu</title><subtitle>Software Developer</subtitle><author><name>James Lieu</name></author><entry><title type="html">Autofac with .Net Core</title><link href="http://jameslieu.co.uk/autofac-with-dotnet-core/" rel="alternate" type="text/html" title="Autofac with .Net Core" /><published>2021-02-16T00:00:00+00:00</published><updated>2021-02-16T00:00:00+00:00</updated><id>http://jameslieu.co.uk/autofac-with-dotnet-core</id><content type="html" xml:base="http://jameslieu.co.uk/autofac-with-dotnet-core/">&lt;p&gt;&lt;img src=&quot;/assets/media/autofac-1.png&quot; style=&quot;height:200px; margin: auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve recently added a post about Inversion of Control and IoC Containers in a previous post &lt;a href=&quot;/inversion-of-control&quot;&gt;here&lt;/a&gt;, I also added another which covers dependency injection. Now I wanted to provide an example of an IoC Container used which will solve some of the issues that can arise when using dependency injection for more complex classes with many dependencies. And so I would like to write about this particular IoC Container: &lt;a href=&quot;https://autofac.org/&quot;&gt;Autofac&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-autofac&quot;&gt;What is Autofac?&lt;/h2&gt;

&lt;p&gt;Autofac is an Inversion of Control Container for .Net Core, ASP.NET Core, .Net Framework, Universal Windows apps and more. With this framework you can build containers with lambdas, types or pre-built instances of components and can also scan dependencies for registration.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;So in my &lt;a href=&quot;/dependency-injection&quot;&gt;last post&lt;/a&gt; I demonstrated an example of dependency injection in action.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/path/to/json-file.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDirectoryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EntryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// some more logic here..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks good so far but what if the complexity increases where dependencies of a class may have their own dependencies and those dependencies could even have their own.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/path/to/json-file.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDirectoryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoggerDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoggerDependencyDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SecondLoggerDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EntryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// some more logic here..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As silly as this looks, it’s a very possible problem and we’re having to rely on the caller code to instantiate the classes which again leads to tight coupling.
And so to solve this problem we can use an IoC Container.&lt;/p&gt;

&lt;h3 id=&quot;ioc-container&quot;&gt;IoC Container&lt;/h3&gt;
&lt;p&gt;IoC Container, also known as DI Container, is a framework for implementing &lt;strong&gt;automatic&lt;/strong&gt; dependency injection. It managed object creation and it’s life-time, and also injects dependencies to the class.&lt;/p&gt;

&lt;p&gt;And so we can use this to automatically instantiating and inject the dependencies whenever it is needed.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// startup.cs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Startup&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ....&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConfigureContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContainerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RegisterModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AutofacModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutofacModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContainerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EntryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEntryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoggerDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoggerDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoggerDependencyDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoggerDependencyDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At it’s core all we’re needing to do is register the concrete classes and also which abstraction/interface it implements, autofac will automatically resolve the object creation if it sees the abstraction/interface being injected into a class via the constructor including the objects own dependencies. Autofac will then automatically dispose the objects it has resolved once they’re no longer needed.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEntryRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_entryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEntryRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_entryRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_entryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// some more logic here..&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;what-other-benefits-does-this-provide&quot;&gt;What other benefits does this provide?&lt;/h3&gt;

&lt;p&gt;While using dependency injection with Autofac makes it easier to test and keep code maintainable. One other benefit is the ability to seemlessly swap out concreate dependencies so long as it implements the abstraction/interface. For example, if I wanted to use a different DataStore or Logger, I can design the new one making sure I implement the same interface and only replace that concrete type in the Autofac module, and so the new concreation will be applied without having to update any logic or code in other areas of the application.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutofacModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContainerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeNewEntryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEntryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeNewLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeNewLoggerDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoggerDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeNewLoggerDependencyDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoggerDependencyDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeNewDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dynamically-register-modules&quot;&gt;Dynamically Register Modules&lt;/h2&gt;

&lt;p&gt;As your project grows, having to maintain the autofac module can get a little tedious. One feature autofac provides is the ability to register by assembly&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutofacModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContainerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RegisterAssemblyTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetExecutingAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AsImplementedInterfaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;InstancePerLifetimeScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By doing this we can also remove the need to independently register our modules and to do it dynamically thus allowing developers to focus on building the application and being able injecting new dependencies without having to maintain the configuration.&lt;/p&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary 📝&lt;/h2&gt;

&lt;p&gt;A fairly simple and brief example of how autofac works. There are many other features Autofac provides that I haven’t covered, and I hope to learn more about them as I dive deeper in the framework.&lt;/p&gt;

&lt;h3 id=&quot;external-sources-&quot;&gt;External sources 💡&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://autofac.org/&quot;&gt;Autofac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/inversion-of-control&quot;&gt;Inversion of Control&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt;&lt;/p&gt;</content><author><name>James Lieu</name></author><category term="Programming" /><summary type="html">IoC Container example with Autofac</summary></entry><entry><title type="html">Dependency Injection</title><link href="http://jameslieu.co.uk/dependency-injection/" rel="alternate" type="text/html" title="Dependency Injection" /><published>2021-02-15T00:00:00+00:00</published><updated>2021-02-15T00:00:00+00:00</updated><id>http://jameslieu.co.uk/dependency-injection</id><content type="html" xml:base="http://jameslieu.co.uk/dependency-injection/">&lt;p&gt;I’ve recently released a post about Inversion of Control and dependency injection in a previous post &lt;a href=&quot;/inversion-of-control&quot;&gt;here&lt;/a&gt;. Now I wanted to provide an example of how the design patten is used and why it’s useful.&lt;/p&gt;

&lt;h2 id=&quot;introduction-&quot;&gt;Introduction 🤝&lt;/h2&gt;

&lt;p&gt;Imagine I have an application which stores entries to a blog. To get the data for the entries, I use an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EntryRepository&lt;/code&gt; which will be responsible for querying the data, the application is a simple CRUD API but for now I’ll only focus on reading the data:&lt;/p&gt;
&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EntryRepository&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ListEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Some logic here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Within the EntryRepository, imagine that, at the moment, it needs to get the data from a class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileDataStore&lt;/code&gt;, which extracts data from a CSV file&lt;/p&gt;

&lt;p&gt;One way I can approach this is to instantiate the class like this:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ListEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/path/to/file.csv&quot;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDirectoryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This would work, but the problem is that it causes &lt;strong&gt;tight coupling&lt;/strong&gt; between those classes. And the reason why it matters is, not only is it difficult to test, it is also difficult to mainain.&lt;/p&gt;

&lt;p&gt;For example, imagine that the entry repository also needs to be able to get entries from other data stores, perhaps from a class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQLDataStore&lt;/code&gt;. How would we achieve this? One option is to pass in a parameter to determine which data store to use:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ListEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useMySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;useMySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MySQLDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/path/to/file.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDirectoryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At first glance that’s not “too” bad, but what happens if there is also a third or even fourth data store added at a later date.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ListEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataStoreEnum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataStoreEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MySQLDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataStoreEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/path/to/csv-file.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDirectoryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataStoreEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SqlServerDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataStoreEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Excel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/path/to/excel-file.xls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDirectoryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExcelDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataStoreEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/path/to/json-file.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDirectoryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it’s starting to grow and become harder to maintain. The logic deciding which data store to use also had to be updated.Even worse, what happens if we need to reuse this same group of potential datastores in other areas of the project.&lt;/p&gt;

&lt;p&gt;Also, it’s not impossible for even more data stores to be added or even different csv files which the FileDataStore can use but would need the path to the file.&lt;/p&gt;

&lt;p&gt;As features or additional complexity are added, the code itself may need to drastically change in order to meet those requirements, even as far as potentially needing new parameters. Bearing in mind that everywhere this EntryRepository is being used will also need to be updated or monitored in case of errors and bugs.&lt;/p&gt;

&lt;p&gt;While this example is a little silly and somewhat uncommon in many projects, we can imagine that, in a production environment, if we’re not careful, the code of said project can become a nightmare to maintain.&lt;/p&gt;

&lt;p&gt;And so the issue of tight coupling is not trivial, even for small projects, if it’s a project with a long development cycle.&lt;/p&gt;

&lt;h2 id=&quot;dependency-injection-&quot;&gt;Dependency Injection 💉&lt;/h2&gt;

&lt;p&gt;One solution to this problem is to apply the inversion of control principle and to remove the responsibility of creating the dependencies out of the EntryRepository. We can do this by combining the Dependency Inversion principle with the Dependency Injection design pattern.&lt;/p&gt;

&lt;p&gt;To apply dependency injection pattern, we &lt;strong&gt;inject&lt;/strong&gt; the dependency directly into the EntryRepository via it’s constructor. What we also need to do is consider the dependency inversion principle which states that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;High-level modules should not depend on low-level modules. Both should depend on the abstraction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IEntryRepository&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ListAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EntryRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEntryRepository&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDataStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EntryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDataStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_dataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ListAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToListAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By injecting the dependency into its constructor and having that being represented as an abstraction/interface in the code, this allows the “dependency” itself, be any form it wants to, so long as it implements that interface (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IDataStore&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IDataStore&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySQLDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDataStore&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// code here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlServerDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDataStore&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// code here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDataStore&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EntryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAllEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// code here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By doing this, whenever we’re using the EntryRepository, it is up to the calling code to provide the dependency.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/path/to/json-file.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDirectoryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EntryRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileDataStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// some more logic here..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not only is this easier to test, this is a lot easier to maintain. Imagine that the project wanted to no longer read from files and new development made to read from a new data store class.&lt;/p&gt;

&lt;p&gt;So long as the new data store class implements the IDataStore interface, you would easily be able to swap and replace the dependency with the new one without rewriting the EntryRepository code at all including it’s automated tests if any.&lt;/p&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary 📝&lt;/h2&gt;

&lt;p&gt;Dependency Injection is a very useful pattern to write clean code. While it is not always necessary it will make the maintainability and testibility of your applications easier and less brittle.&lt;/p&gt;

&lt;p&gt;One issue this can create is the caller code having the burden of instantiating many dependencies which could include dependencies which have their own dependencies. This leads to the next piece of the puzzle which I’ll write about soon, using an IoC Container framework to automatically deal with that problem.&lt;/p&gt;</content><author><name>James Lieu</name></author><category term="Programming" /><summary type="html">An introduction to Dependency Injection</summary></entry><entry><title type="html">Inversion of Control (IoC)</title><link href="http://jameslieu.co.uk/inversion-of-control/" rel="alternate" type="text/html" title="Inversion of Control (IoC)" /><published>2021-02-12T00:00:00+00:00</published><updated>2021-02-12T00:00:00+00:00</updated><id>http://jameslieu.co.uk/inversion-of-control</id><content type="html" xml:base="http://jameslieu.co.uk/inversion-of-control/">&lt;p&gt;Upon attempting to understand inversion of control, I stumbled across a few buzz words which are related but not quite the same, which can get confusing and so I decided to share my learning on some of these terms, what they are and why they’re useful in programming.&lt;/p&gt;

&lt;p&gt;The four terms I’m going to briefly cover are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;🔄 Inversion of Control (IoC)&lt;/li&gt;
  &lt;li&gt;🤝 Dependency Inversion (DIP)&lt;/li&gt;
  &lt;li&gt;💉 Dependency Injection (DI)&lt;/li&gt;
  &lt;li&gt;🗳 IoC Container&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;inversion-of-control-&quot;&gt;Inversion of Control 🔄&lt;/h2&gt;

&lt;p&gt;Inversion of control (IoC) is a programming principle and is used to invert different types of controls in object oriented design to achieve loose coupling. “Control” refers to any additional responsibilities a class has outside of it’s main responsibility.&lt;/p&gt;

&lt;p&gt;IoC is all about inverting the control. In layman’s terms, suppose you drive a car to work. The IoC principle suggests to invert the control, meaning that instead of driving the car yourself to get to work, you can get taxi where somebody else will be driving the car. You wouldn’t be driving yourself and so you can focus on your main responsibilities.&lt;/p&gt;

&lt;p&gt;The IoC principle helps in designing loosely coupled classes which make them testable, maintainable and extensible.&lt;/p&gt;

&lt;h2 id=&quot;dependency-inversion-principle-&quot;&gt;Dependency Inversion Principle 🤝&lt;/h2&gt;
&lt;p&gt;The dependency inversion principle (DIP) is one of the SOLID object-oriented principle invented by Robert Martin (a.k.a. Uncle Bob).
The definition of DIP is&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on the abstraction.&lt;/li&gt;
  &lt;li&gt;Abstractions should not depend on details. Details should depend on abstractions.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;what-is-an-abstraction&quot;&gt;What is an abstraction?&lt;/h4&gt;
&lt;p&gt;Abstraction means something which is non-concrete. When you can create an object from something such as a class, that is considered a concretion, and so abstraction in programming is to create an interface or abstract class which are non-concrete and you wouldn’t be able to instantiate it.&lt;/p&gt;

&lt;p&gt;You cannot create an object of an interface or abstract class. As per DIP, modules should not depend of concrete classes, they should depend on interfaces or an abstract class.&lt;/p&gt;

&lt;p&gt;The advantages of implementing DIP is classes are loosely coupled  and will not depend on any concrete class but instead includes a reference to an interface. This then means that we can, if necessary, use another class which &lt;strong&gt;implements&lt;/strong&gt; that interface with a different implementation.&lt;/p&gt;

&lt;h2 id=&quot;dependency-injection-&quot;&gt;Dependency Injection 💉&lt;/h2&gt;

&lt;p&gt;Dependency Injection (DI) is a design pattern used to implement IoC. It allows the creation of dependent objects outside of a class and provides those objects to a class through different ways. Using DI, we move the creation and binding of the dependent objects outside of the class that depends on them.&lt;/p&gt;

&lt;h4 id=&quot;types-of-dependency-injection&quot;&gt;Types of Dependency Injection&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Constructor Injection: The injector supplies the dependency through the class constructor.&lt;/li&gt;
  &lt;li&gt;Property Injection: The injector supplies the dependency through a public property of the client class.&lt;/li&gt;
  &lt;li&gt;Method Injection: The class implements an interface which declares the methods to supply the dependency and the injector uses this interface to supply the dependency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In professional projects, there are many dependent classes and implementing these patterns is time consuming. Here the IoC Container (aka the DI container) helps us.&lt;/p&gt;

&lt;h2 id=&quot;ioc-container-&quot;&gt;IoC Container 🗳&lt;/h2&gt;

&lt;p&gt;IoC Container, also known as DI Container, is a framework for implementing &lt;strong&gt;automatic&lt;/strong&gt; dependency injection. It managed object creation and it’s life-time, and also injects dependencies to the class.&lt;/p&gt;

&lt;p&gt;The IoC container creates an object of the specified class and also injects all the dependency objects through a constructor, a property or method at run time and disposes it at the appropriate time. This is done so we don’t have to create and manage objects manually.&lt;/p&gt;

&lt;h3 id=&quot;di-lifecycle&quot;&gt;DI lifecycle&lt;/h3&gt;

&lt;h4 id=&quot;-register&quot;&gt;📋 Register&lt;/h4&gt;
&lt;p&gt;The container must know which dependency to instantiate when it encounters a particular type. The process is called registration.&lt;/p&gt;

&lt;h4 id=&quot;-resolve&quot;&gt;🏋 Resolve&lt;/h4&gt;
&lt;p&gt;When using the IoC container, we don’t need to create objects manually, the container does it automatically. This is called resolution. The container creates an object of the specified type, injects the required dependencies if any and returns the object.&lt;/p&gt;

&lt;h4 id=&quot;-dispose&quot;&gt;🗑 Dispose&lt;/h4&gt;
&lt;p&gt;The container will manage the lifetime of the dependent objects. Most IoC containers include lifetime managers to manage an object’s lifecycle and dispose it.&lt;/p&gt;</content><author><name>James Lieu</name></author><category term="Programming" /><summary type="html">What is the IoC principle and why is it useful?</summary></entry><entry><title type="html">Pointers in Go (Golang)</title><link href="http://jameslieu.co.uk/pointers-in-go/" rel="alternate" type="text/html" title="Pointers in Go (Golang)" /><published>2020-12-24T00:00:00+00:00</published><updated>2020-12-24T00:00:00+00:00</updated><id>http://jameslieu.co.uk/pointers-in-go</id><content type="html" xml:base="http://jameslieu.co.uk/pointers-in-go/">&lt;p&gt;&lt;img src=&quot;/assets/media/pointers-in-go-1.jpeg&quot; style=&quot;height:200px; margin: auto&quot; /&gt;
I’m learning a little bit of Go (Golang). There are a few areas in this programming language which are familiar to me and there are many areas which are not.
One of which are Pointers.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-pointer-&quot;&gt;What is a Pointer? 👉&lt;/h2&gt;

&lt;p&gt;A pointer is a variable that stores the address of a value, rather than the value itself. If you think of a computer’s memory (RAM) as a JSON object, a pointer would be like the key and a normal variable would be the value.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pointer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;variableValue&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;/h2&gt;

&lt;h3 id=&quot;creating-a-pointer-&quot;&gt;Creating a Pointer: 🥨&lt;/h3&gt;

&lt;p&gt;To create a pointer variable, you prefix your value with an ampersand (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;someStringPointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you print that pointer you will see a memory address.&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;some string&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;someStringPointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someStringPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will print something that looks like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xc00000e1e0&lt;/code&gt;, Which is the memory address of that variable in your machine.&lt;/p&gt;

&lt;h3 id=&quot;describing-a-pointer-&quot;&gt;Describing a pointer: ✳&lt;/h3&gt;

&lt;p&gt;In a function signature or type definition, the asterisk or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; is used to designate that a value is a pointer.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PassPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;modify-the-original-variable-&quot;&gt;Modify the original variable: ✳&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; to modify the value of the original variable which the pointer references&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;some value&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;someStringPointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someStringPointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;new value&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Prints &quot;new value&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someString&lt;/code&gt; variable will now equal: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new value&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;when-should-pointers-be-used-&quot;&gt;When Should Pointers Be Used 🤷&lt;/h2&gt;

&lt;p&gt;These are the reasons I’ve read where you might want to use a pointer:&lt;/p&gt;

&lt;h3 id=&quot;-a-function-that-mutates-one-of-its-parameters&quot;&gt;🤝 A function that mutates one of it’s parameters&lt;/h3&gt;

&lt;p&gt;When calling a function that takes a pointer as an argument and expect that the variable will be mutated. If the variable doesn’t need to be mutated then a pointer probably wouldn’t need to be used&lt;/p&gt;

&lt;h3 id=&quot;-better-performance&quot;&gt;⏱ Better performance&lt;/h3&gt;

&lt;p&gt;If you have a large string in memory, it can be very expensive to copy that variable each time it is passed to a new function. It may be worthwhile to pass a pointer instead to save CPU and memory&lt;/p&gt;

&lt;h3 id=&quot;-need-a-nil-value-option&quot;&gt;🤙 Need a Nil value option&lt;/h3&gt;
&lt;p&gt;Sometimes a function needs to know what something’s value is, as well as if it exists or not. For example, if a JSON object is:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;James&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*name:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;James&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*name:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*name:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are the ones I know of so far, I’m sure there are other uses I’m not aware of.&lt;/p&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary 📝&lt;/h2&gt;

&lt;p&gt;There is no passing by reference in Go. So pointers are a way to do this if required. There are probably more benefits to using pointers that I haven’t mentioned, but I’ve only just started learning all of this very recently.&lt;/p&gt;

&lt;p&gt;It seems that working with normal values are usually fine, and from what I’ve read about pointers, it ok to avoid them generally speaking. They may be useful tools if used effectively but can easily lead to unreadable code and make it difficult to debug.&lt;/p&gt;</content><author><name>James Lieu</name></author><category term="Programming" /><summary type="html">What is a Pointer?</summary></entry><entry><title type="html">Introduction to Event Driven Architecture</title><link href="http://jameslieu.co.uk/introduction-to-event-driven-architecture-copy/" rel="alternate" type="text/html" title="Introduction to Event Driven Architecture" /><published>2020-12-21T00:00:00+00:00</published><updated>2020-12-21T00:00:00+00:00</updated><id>http://jameslieu.co.uk/introduction-to-event-driven-architecture%20copy</id><content type="html" xml:base="http://jameslieu.co.uk/introduction-to-event-driven-architecture-copy/">&lt;p&gt;Event driven architecture is a design pattern built around the production, detection and reaction to events that take place in time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/event-driven-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Historically business applications tend to be data centric where everything is in databases,
The priority was you always had a valid copy of your data, your business was essentially in your database.
But that doesn’t always lend itself to responsive applications that needs to give you information kind of in the moment.&lt;/p&gt;

&lt;p&gt;So another way of designing business applications is event-driven. Essentially where the data is all in flight.
So it’s all flying around between each of the pieces of software and the first priority is that the system remains responsive&lt;/p&gt;

&lt;p&gt;Imagine a application where you need to make a payment and you call an API saying “submit this payment”, you receive a success response but it takes some time to actually complete the payment in the background. So it’s not a synchronous call.&lt;/p&gt;

&lt;p&gt;However, You wouldn’t want to wait until it’s finished or to poll to constantly ask “is the payment complete”.
It would be preferable to move-on and even better to receive an event notifying you when it’s done. This was  example of an responsive interaction which is event driven.&lt;/p&gt;

&lt;h2 id=&quot;pros-&quot;&gt;Pros 👍&lt;/h2&gt;

&lt;h3 id=&quot;loose-coupling&quot;&gt;Loose coupling&lt;/h3&gt;
&lt;p&gt;Services do not need to be dependent on each other.&lt;/p&gt;

&lt;h3 id=&quot;scalability&quot;&gt;Scalability&lt;/h3&gt;
&lt;p&gt;Since the services are no longer coupled, the throughput of service 1, no longer needs to meet the throughput of service 2.&lt;/p&gt;

&lt;h3 id=&quot;asynchronicity&quot;&gt;Asynchronicity&lt;/h3&gt;
&lt;p&gt;Since services are no longer dependent on a result being returned synchronously, a fire and forget model can be used, which can greatly speed up a process. Although this can have downsides.&lt;/p&gt;

&lt;h3 id=&quot;point-in-time-recovery&quot;&gt;Point in time recovery&lt;/h3&gt;
&lt;p&gt;If events are backed by a queue or maintaining some kind of history, it is possible to replay events, or even go back in time and recover state.&lt;/p&gt;

&lt;h2 id=&quot;cons-&quot;&gt;Cons 👎&lt;/h2&gt;

&lt;h3 id=&quot;over-engineering-of-processes&quot;&gt;Over-engineering of processes&lt;/h3&gt;
&lt;p&gt;Sometimes a simple call from one service to another is enough. If a process uses event driven architecture, it usually requires more infrastructure and work to support it.&lt;/p&gt;

&lt;h3 id=&quot;inconsistencies&quot;&gt;Inconsistencies&lt;/h3&gt;
&lt;p&gt;Because processes now rely on eventual consistency, it is not typical to support ACID transactions, so handling of duplications, or out of sequence events can make service code more complicated, harder to test and debug all situations.&lt;/p&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary 📝&lt;/h2&gt;

&lt;p&gt;This is a basic introduction of Event Driven, there are other benefits to using Event driven architecture such as a reversal of dependencies and high responsiveness.&lt;/p&gt;

&lt;p&gt;Furthermore there are many challenges to consider when &lt;strong&gt;consuming&lt;/strong&gt; Event Driven systems as well which I may write another post on.&lt;/p&gt;</content><author><name>James Lieu</name></author><category term="Programming" /><summary type="html">What is Event Driven?</summary></entry><entry><title type="html">Journal Entry: Coding Bootcamp Hindsight</title><link href="http://jameslieu.co.uk/coding-bootcamp-hindsight/" rel="alternate" type="text/html" title="Journal Entry: Coding Bootcamp Hindsight" /><published>2020-11-17T00:00:00+00:00</published><updated>2020-11-17T00:00:00+00:00</updated><id>http://jameslieu.co.uk/coding-bootcamp-hindsight</id><content type="html" xml:base="http://jameslieu.co.uk/coding-bootcamp-hindsight/">&lt;p&gt;&lt;em&gt;Note: this was an old entry in my programming journal dated 2018-07-09, this is unedited since I wrote it and I’ll leave an update at the bottom about how I feel about it today.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This journal entry also laid out my past work experiences and how I really started to gain momentum in my learning and career progression.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;coding-bootcamp-hindsight---2018-08-09&quot;&gt;Coding Bootcamp Hindsight - 2018-08-09&lt;/h2&gt;

&lt;p&gt;I was just posting my response to the reddit post that started all of this journal stuff (my initial response had disappeared off my phone as I didn’t submit it and the reddit app refreshed when I changed the app from Youtube for Evy).&lt;/p&gt;

&lt;p&gt;I’ve outlined how it’s perfectly possible to start a career in programming without attending a Bootcamp like Makers academy, after attending and thinking back on it I don’t know if they really taught me anything. They basically asked us to do a lot of self learning and provided someone to help answer questions, I also remember that I never really absorbed any information from the teaching they did, it was all very clunky and the classes basically involved looking at Ruby Koans or Git/Command-line equivalents.&lt;/p&gt;

&lt;p&gt;It was not until I graduated and had to look for work did I start to learn things. Even then I struggled but luckly managed to find some Jobs where I was able to slowly pick things up. Not at Psyt or LoyaltyLion but at Velti/mGage and Rentify, that was when I had colleagues who I was able to learn from.&lt;/p&gt;

&lt;p&gt;Velti/mGage had Dan and Emre, who I was able to speak with and look at the codebase in detail.&lt;/p&gt;

&lt;p&gt;At Rentify, I really managed to pick things up through the challenges I faced there, the team was larger and they gave me real tasks to work on. Through that came many mistakes and learning experiences, I picked up JavaScript, a bit of ReactJS, Ruby on Rails in depth and had projects/features I can call my own. Edwin, Ryan, Joe and Luke really helped kickstart the programming knowledge I had today, Edwin especially helped and unofficially acted as the mentor I needed to learn the basics properly and grow into the dev I am today. It was unfortunate that I left at such a low note, failing to complete the feature that was assigned to me and ultimately left a poor impression on my last day. No point dwelling on this, I don’t think I became that close with them all ultimately.&lt;/p&gt;

&lt;p&gt;Now I’m a PHP developer here at TwentyCI where the team is significantly smaller and so my role here encourages me to take in more responsibilities and improve my knowledge in programming so I can further my career. Tom has been a great help at explaining PHP and Laravel when I joined the project, once I got some hands on experience I think I began to pick things up quite quickly to the point where problems and challenges are not impossible to overcome at my level anymore. Bear in mind that Tom usually takes on the more difficult tasks or new work, whereas I pick up some of the simpler easier stuff (which I don’t mind), its largely stress free and so I think I’ll stay and only consider new opportunities once we get the property business going.&lt;/p&gt;

&lt;p&gt;Summary&lt;/p&gt;

&lt;p&gt;Hindsight is a great thing. It allows me to think back on decisions made and learn from them, it also feels like my experiences and mistakes can be used to help and inform others that might be wondering if they should follow the same path. Dwelling on mistakes or poor decisions can be useful but sometimes unproductive as well, better to think over it and consider how you would do something differently for next time and if a similar scenario comes your way, you may be able to use what you’ve learned to drive your decisions moving forward.&lt;/p&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary 📝&lt;/h2&gt;

&lt;p&gt;So my thoughts about Coding Bootcamps have changed since I wrote this entry, I think it’s disingenuous of me to say I didn’t learn &lt;em&gt;anything&lt;/em&gt;, but I do feel I didn’t get my &lt;strong&gt;money’s worth&lt;/strong&gt; insofar that it had cost me £4500, and the knowledge I had gained at the time was &lt;strong&gt;not worth £4500&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That said, I managed to use the foundations of what I had learned to get an return on investment on that very quickly and maybe that was where the value actually came from.&lt;/p&gt;

&lt;p&gt;So when asking myself was it worth the money, I would say no. Was the decision to enroll to this bootcamp, when I did, as a career changing move, absolutely.&lt;/p&gt;

&lt;p&gt;Also, it’s worth noting that I was an early member of Maker’s Academy and they were still figuring out the curriculum. They also hadn’t built the reputation and partners they have today, so it was a bigger struggle for us early adopters than those who have enrolled in the past few years.&lt;/p&gt;

&lt;p&gt;Do I recommend it? Probably I would, if you’re serious about pursuing a career in software development. It can be pretty expensive but you’d be able to get a return on that investment very quickly providing you put in the time and energy to make that happen.&lt;/p&gt;</content><author><name>James Lieu</name></author><category term="Career" /><summary type="html">An old programming journal entry - 2018-07-09</summary></entry><entry><title type="html">Introduction To Cucumber</title><link href="http://jameslieu.co.uk/introduction-to-cucumber/" rel="alternate" type="text/html" title="Introduction To Cucumber" /><published>2020-08-07T00:00:00+01:00</published><updated>2020-08-07T00:00:00+01:00</updated><id>http://jameslieu.co.uk/introduction-to-cucumber</id><content type="html" xml:base="http://jameslieu.co.uk/introduction-to-cucumber/">&lt;p&gt;&lt;img src=&quot;/assets/media/cucumber-tests-1.png&quot; style=&quot;height: 50px; margin:0 auto&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-cucumber-&quot;&gt;What is Cucumber? 🥒&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://cucumber.io/&quot;&gt;Cucumber&lt;/a&gt; is an open source tool for running automated tests written in plain language.&lt;/p&gt;

&lt;p&gt;Because they’re written in plain language, they can be read by anyone involved with the product development. And it can be used to help improve communication, collaboration and trust.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/cucumber-tests-2.png&quot; style=&quot;height: 200px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cucumber reads executable specifications written in plain text, it validates the software’s behaviour based on those specifications and they consist of multiple scenarios and each scenario has a list of steps for Cucumber to work through.&lt;/p&gt;

&lt;p&gt;It verifies that the software conforms with the specification and generates a report, indicating success or failure for each scenario.&lt;/p&gt;

&lt;p&gt;In order for Cucumber to understand the scenarios, they must follow some basic syntax rules, called Gherkin.&lt;/p&gt;

&lt;h2 id=&quot;gherkin-syntax-&quot;&gt;Gherkin Syntax 💬&lt;/h2&gt;

&lt;p&gt;So Gherkin is the language Cucumber uses to define test cases. It’s a set of grammar rules that makes plain text structured enough for Cucumber to understand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/cucumber-tests-6.png&quot; /&gt;
&lt;em&gt;Example of Gherkin Syntax&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s designed to be non-technical, human readable, and collectively describes use-cases relating to a software system and seeks to enforce firm, unambiguous requirements. As well as document how the system behaves.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/cucumber-tests-5.png&quot; /&gt;
&lt;em&gt;Gherkin also supports over 70 languages, this is written in Portuguese&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;keywords-&quot;&gt;Keywords 🔍&lt;/h3&gt;

&lt;p&gt;Gherkin uses a set of special keywords to give structure and meaning to executable specifications. Most lines in a Gherkin document start with one of those keywords.&lt;/p&gt;

&lt;h5 id=&quot;-feature&quot;&gt;⛲ Feature&lt;/h5&gt;
&lt;p&gt;The purpose of the Feature keyword is to provide a high-level description of a software feature, and to group related scenarios. The first primary keyword in a Gherkin document must always be Feature.&lt;/p&gt;

&lt;h5 id=&quot;-scenario-or-example&quot;&gt;❎ Scenario or Example.&lt;/h5&gt;
&lt;p&gt;This is a concrete example that illustrates a business rule which consists of a list of steps.&lt;/p&gt;

&lt;p&gt;You can have as many steps as you like, but it’s recommended not to have too many. Having too many steps in an scenario, will cause it to lose it’s expressive power as specification and documentation.&lt;/p&gt;

&lt;h3 id=&quot;steps-&quot;&gt;Steps 👣&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Given&lt;/strong&gt; steps are used to describe the initial context of the system. It’s typically something that’s happened in the past.&lt;/p&gt;

&lt;p&gt;When Cucumber executes a &lt;strong&gt;Given&lt;/strong&gt; step, it will configure the system to be in a well-defined state, such as creating and configuring objects or adding data to a test database.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;When&lt;/strong&gt; steps are used to describe an event, or an action. This can be a person interacting with the system, or it can be an event triggered by another system.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Then&lt;/strong&gt; steps are used to describe an expected outcome, or result. It should use an assertion to compare what the system actually does, to, what the “Step” says the system is supposed to do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/cucumber-tests-3.png&quot; style=&quot;height:320px;&quot; /&gt;
&lt;em&gt;Example “Steps” of an API call to search for a contact&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you have successive &lt;strong&gt;Given’s&lt;/strong&gt;, &lt;strong&gt;When’s&lt;/strong&gt; or &lt;strong&gt;Then’s&lt;/strong&gt;, you can use &lt;strong&gt;And&lt;/strong&gt; or &lt;strong&gt;But&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;step-definitions-&quot;&gt;Step Definitions 💭&lt;/h3&gt;

&lt;p&gt;Cucumber tests are divided into individual Features. These Features are subdivided into Scenarios, which are sequences of Steps.&lt;/p&gt;

&lt;p&gt;Steps can be considered a method invocation. Before Cucumber can execute one, it must be told how that step should be performed via a Step Definition.&lt;/p&gt;

&lt;p&gt;Step definitions are the glue between, features written in Gherkin, and the actual test’s implementation.
They connect Steps to programming code and carries out the action that should be performed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/cucumber-tests-4.png&quot; /&gt;
&lt;em&gt;Step Definitions for the above “Steps” example&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;They are methods with an expression, that links it to one or more Steps.&lt;/p&gt;

&lt;p&gt;So when Cucumber executes a Step in a scenario, it will look for a matching Step Definition to execute.&lt;/p&gt;

&lt;h2 id=&quot;key-points-&quot;&gt;Key Points 🔑&lt;/h2&gt;

&lt;p&gt;So just to run through some of the key points&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cucumber is an Open source tool for test automation&lt;/li&gt;
  &lt;li&gt;It reads executable specifications written in plain text.&lt;/li&gt;
  &lt;li&gt;The test-cases are written in a language called Gherkin.&lt;/li&gt;
  &lt;li&gt;Step definitions connect Gherkin steps to programming code via an expression&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary 📝&lt;/h2&gt;

&lt;p&gt;So the question remains. Why?&lt;/p&gt;

&lt;p&gt;Why might we want to write cucumber tests? Bearing in mind that this could be &lt;strong&gt;in addition to unit testing&lt;/strong&gt;. What might we want to achieve? What is the goal of testing?&lt;/p&gt;

&lt;h3 id=&quot;to-increase-confidence-for-stakeholders-through-evidence---dan-north&quot;&gt;“To increase confidence for stakeholders through evidence - Dan North”&lt;/h3&gt;

&lt;p&gt;This is a quote from Dan North - the creator of behaviour driven development. What he means by “stakeholders” is people whose “lives” you touch i.e. your users. But it also can mean product owners, compliance, security, testers, support, other developers.&lt;/p&gt;

&lt;p&gt;Cucumber tests are a form of testing, but you wouldn’t just use Cucumber for that, you’re using it to help communicate requirements. To not only increase confidence for stakeholders but also for yourselves.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;external-resources&quot;&gt;External Resources&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://cucumber.io/&quot;&gt;https://cucumber.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cucumber/cucumber-js&quot;&gt;https://github.com/cucumber/cucumber-js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cucumber_(software)&quot;&gt;https://en.wikipedia.org/wiki/Cucumber_(software)&lt;/a&gt;&lt;/p&gt;</content><author><name>James Lieu</name></author><category term="Programming" /><summary type="html">What are cucumber tests and why might they be useful</summary></entry><entry><title type="html">Pomodoro Technique</title><link href="http://jameslieu.co.uk/pomodoro-technique/" rel="alternate" type="text/html" title="Pomodoro Technique" /><published>2020-08-03T00:00:00+01:00</published><updated>2020-08-03T00:00:00+01:00</updated><id>http://jameslieu.co.uk/pomodoro-technique</id><content type="html" xml:base="http://jameslieu.co.uk/pomodoro-technique/">&lt;p&gt;I’ve been using the Pomodoro technique for work. It greatly improves time management and boosts productivity. I’ve been reflecting on why it’s been so effective for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/pomodoro-technique-1.png&quot; style=&quot;height:150px;margin:0 auto&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-pomodoro-technique&quot;&gt;What is the Pomodoro technique?&lt;/h2&gt;

&lt;p&gt;According to &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Pomodoro_Technique&quot;&gt;Wikipedia&lt;/a&gt;. the Pomodoro Technique is a time management method developed by Francesco Cirillo.
The technique uses a timer to break down work into intervals, traditionally 25 minutes in length, separated by short breaks.&lt;/p&gt;

&lt;p&gt;There are six steps in the original technique:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Decide on the task to be done.&lt;/li&gt;
  &lt;li&gt;Set the pomodoro timer (traditionally to 25 minutes).&lt;/li&gt;
  &lt;li&gt;Work on the task.&lt;/li&gt;
  &lt;li&gt;End work when the timer rings and put a checkmark on a piece of paper.&lt;/li&gt;
  &lt;li&gt;If you have fewer than four checkmarks, take a short break (3–5 minutes) and then return to step 2; otherwise continue to step 6.&lt;/li&gt;
  &lt;li&gt;After four pomodoros, take a longer break (15–30 minutes), reset your checkmark count to zero, then go to step 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;my-experience-&quot;&gt;My Experience 🧔&lt;/h2&gt;

&lt;p&gt;I’ve been finding myself pretty tired lately, it’s sometimes hard to focus and be productive, so I’ve started applying this technique into my work days to see if this will help.&lt;/p&gt;

&lt;p&gt;I use an application called &lt;a href=&quot;https://www.focustodo.cn/&quot;&gt;Focus To-do&lt;/a&gt; and also recommend &lt;a href=&quot;https://tide.fm/en_US/&quot;&gt;Tide&lt;/a&gt; for Android/iPhone&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/pomodoro-technique-2.png&quot; style=&quot;height:200px; float:left&quot; /&gt;
&lt;img src=&quot;/assets/media/pomodoro-technique-3.png&quot; style=&quot;height:200px&quot; /&gt;
&lt;a href=&quot;https://www.focustodo.cn/&quot;&gt;https://www.focustodo.cn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having used the Pomodoro technique, I’ve come to realise some of the other hidden benefits it provides.&lt;/p&gt;

&lt;h3 id=&quot;prompts-you-to-work-&quot;&gt;Prompts you to work ⏱&lt;/h3&gt;
&lt;p&gt;There are days where your motivation to do anything is lower than usual, maybe you didn’t sleep well the night before, maybe you’re feeling mentally drained. Triggering a Pomodoro timer, will prompt you to start work,&lt;/p&gt;

&lt;h3 id=&quot;helps-with-focus-&quot;&gt;Helps with focus 💡&lt;/h3&gt;
&lt;p&gt;Knowing that I have one pomodoro (25 minutes) to complete a task or two, the mentality of knowing there is a countdown ongoing, encourages me to remain focused on the task at hand.&lt;/p&gt;

&lt;p&gt;It also helps, to check how much time is left every now and then to consider quickly how I’m progressing and whether I can completely finish the task before the timer runs out or to leave it in a position to pick up where I left off after the break.&lt;/p&gt;

&lt;h3 id=&quot;helps-with-distractions-&quot;&gt;Helps with distractions 💢&lt;/h3&gt;
&lt;p&gt;It’s not uncommon to be distracted while working, whether it’s looking at your phone or browsing the internet. In my experience, I’ve done this a number of times, but when in the middle of a pomodoro session, I’m conscious about the timer ticking away and so I mentally try not to waste it be focusing on the task.&lt;/p&gt;

&lt;h3 id=&quot;encourages-more-breaks-&quot;&gt;Encourages more breaks ⏳&lt;/h3&gt;
&lt;p&gt;Having rest breaks will boost energy levels as you work throughout the day. The more you take, the more energy you replenish. But we often don’t realise how long we’ve been working until something distracts us such as going for a loo break, feeling hungry or thirsty.&lt;/p&gt;

&lt;p&gt;The breaks should be away from your desk or monitor. You’re encouraged to move around or look at something that is not your work monitor.&lt;/p&gt;

&lt;p&gt;In my experience, when I’ve worked without many breaks, I tend to be very mentally drained towards the last couple of hours of work and even in the evenings. By adopting the pomodoro technique, the breaks are short and plenty, and for me personally, I’ve found myself to have a lot more energy throughout the day because I had taken the breaks as directed.&lt;/p&gt;

&lt;h3 id=&quot;other-considerations-&quot;&gt;Other Considerations 🤔&lt;/h3&gt;

&lt;p&gt;This technique doesn’t seem to work for everyone. We’ve tried it during pair programming and the team member whom I was paired with said that It breaks the flow of conversation or the train of thought as 25 minutes intervals are too short.&lt;/p&gt;

&lt;p&gt;This is also true for larger meetings of 3 or more people, 25 minutes seems to not be enough time for everyone to contribute to the discussion. If anything, the breaks feels more like an interruption.&lt;/p&gt;

&lt;p&gt;Although, we can increase the Pomodoro time to more than 25 minutes. &lt;a href=&quot;https://zoom.us/&quot;&gt;Zoom&lt;/a&gt; has a 40 minute limit for its free plan. I think 40 minutes is a good number for a break between meetings. As meetings itself can be extremely draining if its duration is too long.&lt;/p&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary 📝&lt;/h2&gt;

&lt;p&gt;I personally like this technique, I think it works very well with programming, especially when you’re sitting in front of the monitor for large portions of the day. I feel less tired in the evenings and at the more productive overall. I don’t use this technique every day but I feel like I should.&lt;/p&gt;

&lt;p&gt;Our minds needs regular breaks. Trying focus without giving yourself time to recover will likely drain you towards the end of the day.&lt;/p&gt;

&lt;p&gt;I would recommend this technique for anyone who is struggling to stay motivated or easily distracted. It is especially helpful when working from home.&lt;/p&gt;</content><author><name>James Lieu</name></author><category term="Productivity" /><summary type="html">I've been using the Pomodoro technique for work. It greatly improves time management and boosts productivity. I've been reflecting on why it's been so effective for me.</summary></entry><entry><title type="html">100 Days of Pluralsight</title><link href="http://jameslieu.co.uk/100-days-of-pluralsight/" rel="alternate" type="text/html" title="100 Days of Pluralsight" /><published>2020-07-24T00:00:00+01:00</published><updated>2020-07-24T00:00:00+01:00</updated><id>http://jameslieu.co.uk/100-days-of-pluralsight</id><content type="html" xml:base="http://jameslieu.co.uk/100-days-of-pluralsight/">&lt;p&gt;I’ve managed to achieve the 100 day learning streak for Pluralsight&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/100-days-of-pluralsight-1.png&quot; style=&quot;height:450px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few months ago, I’ve written a post about &lt;a href=&quot;/how-i-build-habits&quot;&gt;how I build habits&lt;/a&gt;, where I outline a method I use to create habits that allow me to perform tasks consistently in a maintainable way.&lt;/p&gt;

&lt;p&gt;By applying this method, I have managed to watch Pluralsight daily for &lt;strong&gt;100 days straight&lt;/strong&gt;. I’d thought it would be good to share this milestone as well as reinforce the idea that &lt;strong&gt;small consistent actions can make a big impact on the end result&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By only aiming to watch a minimum of 10 minutes of Pluralsight videos a day, I was able to consume so much content. Here are the receipts:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/100-days-of-pluralsight-2.png&quot; /&gt;
&lt;em&gt;My Personal Profile as of 24th July 2020&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So here is my 100 day learning streak insight. It also states I’ve watched 75+ hours of content, this is not actually the case, Pluralsight does not account for when you watch the courses are a higher speed i.e. 1.5x - 2.0x speed.&lt;/p&gt;

&lt;p&gt;The audio for the videos seem to also be artificially slowed which seems a little disingenuous as it means the courses duration are not quite the length they say they are. I mention this in my &lt;a href=&quot;/pluralsight-review&quot;&gt;Pluralsight review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now onto the courses:
 &lt;img src=&quot;/assets/media/100-days-of-pluralsight-3.gif&quot; /&gt;
&lt;em&gt;All the courses I’ve watched so far as of 24th July 2020&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The ‘red badge’ icon on the left of each course listed, are the ones I’ve completed. There were a few I didn’t finish watching because I either found not relevant, or I was already well-versed on the remaining videos or I’m currently watching them.&lt;/p&gt;

&lt;p&gt;Bear in mind that this history includes courses completed even before the start of my streak. In fact, with the exception of two days (one in March and another in April), I’ve been watching Pluralsight daily since &lt;strong&gt;February 24th 2020&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/100-days-of-pluralsight-4.gif&quot; /&gt;
 &lt;em&gt;My daily streaks up until October (when I purchased the subscription)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I remember those days I missed, each one I had basically forgotten to watch it that day, they were also days where my evening was unusually busy (on both days). Had I not broken my streak both times, my daily learning streak would’ve been &lt;strong&gt;151 days&lt;/strong&gt; today&lt;/p&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary 📝&lt;/h2&gt;

&lt;p&gt;As mentioned, I was really only able to achieve this due to &lt;a href=&quot;/how-i-build-habits&quot;&gt;building a habit&lt;/a&gt;. I highly recommend having a read to help you achieve your goals, whether its to exercise more or read more, this is an excellent way to get started.&lt;/p&gt;

&lt;p&gt;Will I continue with this habit? Probably, my company did pay for a annual subscription, so it’d be a good idea to get as much value from it as I can. I don’t regret consuming this much content, they’re very educational and very relevant to my career.&lt;/p&gt;

&lt;p&gt;It doesn’t look like anything special happens once I reached this milestone. It would be nice for Pluralsight to acknowledge it by sending an email or introduce achievement badges of some sort, perhaps that would encourage me to aim even higher, 200 daily streaks? 1 year? Regardless, its not really that important.&lt;/p&gt;

&lt;p&gt;Would I recommend Pluralsight? &lt;a href=&quot;/pluralsight-review&quot;&gt;See my review here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In any case, I’m pretty proud of my 100 day streak milestone!&lt;/p&gt;</content><author><name>James Lieu</name></author><category term="Productivity" /><summary type="html">I've managed to achieve the 100 day learning streak for Pluralsight</summary></entry><entry><title type="html">Top Tips For Recruiters From a Developer</title><link href="http://jameslieu.co.uk/top-tips-for-recruiters-from-a-developer/" rel="alternate" type="text/html" title="Top Tips For Recruiters From a Developer" /><published>2020-06-22T00:00:00+01:00</published><updated>2020-06-22T00:00:00+01:00</updated><id>http://jameslieu.co.uk/top-tips-for-recruiters-from-a-developer</id><content type="html" xml:base="http://jameslieu.co.uk/top-tips-for-recruiters-from-a-developer/">&lt;p&gt;So I recently had create a post on &lt;a href=&quot;/my-experience-with-recruiters/&quot;&gt;My Experience With Recruiters&lt;/a&gt;. I think giving constructive criticism is valuable but providing solutions is probably more useful.&lt;/p&gt;

&lt;p&gt;I wanted to give some general feedback this time, to give &lt;strong&gt;my opinion&lt;/strong&gt; on what &lt;strong&gt;I feel would engage me if I were on the market for opportunities&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;-know-your-audience&quot;&gt;😀 Know your audience&lt;/h3&gt;

&lt;p&gt;My profile specifically states what technology I specialise in i.e. C#, JavaScript, etc.  Why would you then send me a job spec for Java or C++ roles? Sending me applications for technologies I have no experience in, only makes me think that you didn’t even bother reading my profile.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Although I respect that you’re trying to get leads, so reading each profile before sending out mass emails makes the process slower, no excuse if you’re calling me on the phone however).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Still, I’m less likely to work with you if I see that you’re not showing interest.&lt;/p&gt;

&lt;p&gt;I respond the best when the email was tailored to me personally, or when on the phone, the recruiter demonstrates that they’ve read my profile. Even if I’m not on the market for opportunities, I think this kind of customer service is the best, more professional and shows confidence that you know what you’re doing.&lt;/p&gt;

&lt;p&gt;I’m aware that recruiters are talking to many potential customers and so spending too much time doing this for each of them may not be as ideal. My point is that I’m more likely to be engaged if you did this.&lt;/p&gt;

&lt;h3 id=&quot;-be-creative&quot;&gt;✨ Be creative&lt;/h3&gt;

&lt;p&gt;I’ve received so many recruitment emails during my time as a developer. They’re generic enough for me to ignore them completely, meaning I don’t even open them anymore. The ones I do open, have interesting creative subject titles and the content is also interesting.&lt;/p&gt;

&lt;p&gt;Bear in mind it is possible that many of recipients of these recruitment emails are likely already employed and are not actively looking for roles. If you’re planning to create leads from this audience, it would increase your chances if your email isn’t plain and generic.&lt;/p&gt;

&lt;h3 id=&quot;-communication&quot;&gt;😀 Communication&lt;/h3&gt;

&lt;p&gt;Most recruiters start off very polite and enthusiastic, but once you’ve submitted your CV with them to forward to their clients, communication quality goes way down.&lt;/p&gt;

&lt;p&gt;If I’m in the process of working with you, some updates to the application would be appreciated.&lt;/p&gt;

&lt;p&gt;When I was job hunting, I found that I was the one who had to chase up on the progress on the application, there was on recruiter who actually knew the progress of the applications, but just didn’t bother informing me of it, was a little rude about it as well. That guy I’ll never work with again and I know he recruits with roles that matches my profile.&lt;/p&gt;

&lt;p&gt;In contrast to this, one of the recruiters who had successfully gotten me a role had such great communication and interpersonal skills that when I were made redundant at said role years later, I had called him first who then had gotten me another role.&lt;/p&gt;

&lt;h3 id=&quot;-stay-in-touch&quot;&gt;🤝 Stay in touch&lt;/h3&gt;

&lt;p&gt;If you’ve managed to get somebody a role. Ask them to give you a recommendation on LinkedIn, every few months or so, send a message to ask how they’re doing, maintaining communications with the ones you’ve worked with in the past can also one day lead to another opportunity to work with said person.&lt;/p&gt;

&lt;p&gt;I for one often appreciate someone getting in touch just for the sake of saying hi. If you’re trying to sell me something, I may have my guard up however.&lt;/p&gt;

&lt;h3 id=&quot;-know-the-company-youre-recruiting-for&quot;&gt;🏢 Know the company you’re recruiting for&lt;/h3&gt;

&lt;p&gt;When selling me a role, I found that I was more impressed with a recruiter when they talk about the company, if they’ve  successfully recruited for them before, met the people there, have an idea of the office environment, knowing what else the company has to offer i.e. Good coffee, bean bag chairs, free fruit etc.&lt;/p&gt;

&lt;p&gt;If I have questions that may not be in the job spec, if the recruiter can answer them, it suggests that they have a great relationship with the company as well, which then suggests that working with this recruiter is worth my while.&lt;/p&gt;

&lt;h3 id=&quot;-understand-the-tech-youre-recruiting-for&quot;&gt;💻 Understand the tech you’re recruiting for&lt;/h3&gt;

&lt;p&gt;I’m not saying you should learn TDD, but you should at least be aware of what it is or what it means. This includes some of the other items in your spec such as TDD, BDD, Redux, webpack etc&lt;/p&gt;

&lt;p&gt;You don’t need to be an expert on any of these, but being able to explain what the job involves without just reading from the spec can be very engaging for the person you’re trying to recruit. It’s like selling a product to someone, if you don’t really know what you’re selling, it makes it difficult to believe anything you’re saying.&lt;/p&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary 📝&lt;/h2&gt;

&lt;p&gt;This is only my opinion and should be taken with a grain of salt. I appreciate that I know nothing of the recruitment industry so my assumptions here can be completely wrong. I’m just providing &lt;strong&gt;feedback from a customer’s perspective&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I feel that recruiters have a bad reputation among the programming industry and perhaps this is due to the lack of feedback from customers such as myself. I’ve had many good and bad experiences, I feel it’s valuable to recognise and celebrate the good while providing constructive criticism for the bad.&lt;/p&gt;

&lt;p&gt;I’m not expert but recruitment feels like a ‘people’ industry more than anything, and so to successfully to sell your ‘roles’ to us, communication is key, build a network and maintain it.&lt;/p&gt;

&lt;p&gt;In any case, if you’re a recruiter reading this, I hope there are some insights you can take-away from this and I wish you the best of luck.&lt;/p&gt;</content><author><name>James Lieu</name></author><category term="Career" /><summary type="html">I wanted to give some general feedback this time, to give my opinion on what I feel would engage me if I were on the market for opportunities.</summary></entry></feed>